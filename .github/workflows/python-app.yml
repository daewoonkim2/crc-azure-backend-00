# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

# This workflow will build a Python app and deploy it to an Azure Functions App on Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-python?pivots=python-mode-configuration
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

env:
  AZURE_FUNCTIONAPP_NAME: 'crc-az-functionapp-01'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  PYTHON_VERSION: '3.9'                     # set this to the python version to use (e.g. '3.6', '3.7', '3.8')
  RESOURCE_GROUP_LOCATION: 'EastUS2'
  RESOURCE_GROUP_NAME: 'crc-azure-resource-group-00'
  TEMPLATE_FILE_NAME: 'function-template.json'

name: Python application - test and deploy to azure function app

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # build-and-test:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python 3.9
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.9"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install flake8
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #   - name: Lint with flake8
  #     run: |
  #       # stop the build if there are Python syntax errors or undefined names
  #       flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #       # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #       flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  #   - name: Test with unittest
  #     run: |
  #       python3 tests.py

  deploy-arm-resources:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - uses: Azure/CLI@v1
      with:
        inlineScript: |
          #!/bin/bash
          az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location ${{ env.RESOURCE_GROUP_LOCATION }}
          echo "Azure resource group created"
    - uses: azure/arm-deploy@v1
      with:
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        template: ./function-template.json
        parameters: storageAccountType=Standard_LRS

  # build-and-deploy:
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #   - name: 'Checkout GitHub Action'
  #     uses: actions/checkout@v3

  #   # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
  #   # - name: 'Login via Azure CLI'
  #   #   uses: azure/login@v1
  #   #   with:
  #   #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

  #   - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}

  #   - name: 'Resolve Project Dependencies Using Pip'
  #     shell: bash
  #     run: |
  #       pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt --target=".python_packages/lib/site-packages"
  #       popd

  #   - name: 'Run Azure Functions Action'
  #     uses: Azure/functions-action@v1
  #     id: fa
  #     with:
  #       app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
  #       package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
  #       publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure RBAC
  #       scm-do-build-during-deployment: true
  #       enable-oryx-build: true
